// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreMenegment.Data;

namespace StoreMenegment.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210423174703_StoreManagment")]
    partial class StoreManagment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("StoreMenegment.Models.Address", b =>
                {
                    b.Property<int>("AdresId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AdresParentId")
                        .HasColumnType("int");

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectFileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("ShopAdresStritName")
                        .IsRequired()
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("AdresId");

                    b.HasIndex("AdresParentId");

                    b.HasIndex("CityId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ObjectFileId");

                    b.ToTable("Adres");
                });

            modelBuilder.Entity("StoreMenegment.Models.Brands", b =>
                {
                    b.Property<int>("BrandyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BrandyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("BrandyParentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectFileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("BrandyId");

                    b.HasIndex("BrandyParentId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ObjectFileId");

                    b.ToTable("Brandies");
                });

            modelBuilder.Entity("StoreMenegment.Models.Categories", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("CategoryParentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectFileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("CategoryId");

                    b.HasIndex("CategoryParentId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ObjectFileId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("StoreMenegment.Models.Cities", b =>
                {
                    b.Property<int>("CityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("CityParentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("CityId");

                    b.HasIndex("CityParentId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("StoreMenegment.Models.Departments", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("DepartmentParentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("DepartmentId");

                    b.HasIndex("DepartmentParentId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("StoreMenegment.Models.EmployeeGroups", b =>
                {
                    b.Property<int>("EmployeeGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("EmployeeGroupNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(8)");

                    b.Property<int>("EmployeeGroupParentId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("EmployeeGroupId");

                    b.HasIndex("EmployeeGroupParentId");

                    b.HasIndex("EmployeesId");

                    b.HasIndex("LanguageId");

                    b.ToTable("EmployeesGroups");
                });

            modelBuilder.Entity("StoreMenegment.Models.Employees", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2(7)");

                    b.Property<int>("BrenchAddresId")
                        .HasColumnType("int");

                    b.Property<int>("BrenchAddressesId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfReceipt")
                        .HasColumnType("datetime2(7)");

                    b.Property<DateTime>("DateOfRelease")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("ElPosta")
                        .IsRequired()
                        .HasColumnType("nvarchar(90)");

                    b.Property<int>("EmployeeParentId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeesParentId")
                        .HasColumnType("int");

                    b.Property<string>("FirsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Phone1")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PosishenId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("EmployeeId");

                    b.HasIndex("BrenchAddressesId");

                    b.HasIndex("EmployeesParentId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PosishenId");

                    b.ToTable("Employeess");
                });

            modelBuilder.Entity("StoreMenegment.Models.Futers", b =>
                {
                    b.Property<int>("FuterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("FuterName")
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("FuterParentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("FuterId");

                    b.HasIndex("FuterParentId");

                    b.HasIndex("LanguageId");

                    b.ToTable("Futers");

                    b.HasData(
                        new
                        {
                            FuterId = 1,
                            FuterName = "სამუშაო საათები",
                            FuterParentId = 1,
                            IsDelete = false,
                            LanguageId = 1,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 2,
                            FuterName = "ონლაინ მაღაზია: 24/7",
                            FuterParentId = 2,
                            IsDelete = false,
                            LanguageId = 1,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 3,
                            FuterName = "ორშაბათი-პარასკევი: 09:00-20:00",
                            FuterParentId = 3,
                            IsDelete = false,
                            LanguageId = 1,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 4,
                            FuterName = "შაბათი-კვირა: 09:00-18:00",
                            FuterParentId = 4,
                            IsDelete = false,
                            LanguageId = 1,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 5,
                            FuterName = "კონტაქტი",
                            FuterParentId = 5,
                            IsDelete = false,
                            LanguageId = 1,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 6,
                            FuterName = "მობილური: 599985226",
                            FuterParentId = 6,
                            IsDelete = false,
                            LanguageId = 1,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 7,
                            FuterName = "ქალაქი: 0995322706389",
                            FuterParentId = 7,
                            IsDelete = false,
                            LanguageId = 1,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 8,
                            FuterName = "მისამართი: ბერი გაბრიელ სალოსის 7-ე შეს. 10-ე კორ.",
                            FuterParentId = 8,
                            IsDelete = false,
                            LanguageId = 1,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 9,
                            FuterName = "working hours",
                            FuterParentId = 1,
                            IsDelete = false,
                            LanguageId = 2,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 10,
                            FuterName = "online shop: 24/7",
                            FuterParentId = 2,
                            IsDelete = false,
                            LanguageId = 2,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 11,
                            FuterName = "Monday-Friday: 09:00-20:00",
                            FuterParentId = 3,
                            IsDelete = false,
                            LanguageId = 2,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 12,
                            FuterName = "weekend: 09:00-18:00",
                            FuterParentId = 4,
                            IsDelete = false,
                            LanguageId = 2,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 13,
                            FuterName = "Contact",
                            FuterParentId = 5,
                            IsDelete = false,
                            LanguageId = 2,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 14,
                            FuterName = "Mobile: 599985226",
                            FuterParentId = 6,
                            IsDelete = false,
                            LanguageId = 2,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 15,
                            FuterName = "City: 0995322706389",
                            FuterParentId = 7,
                            IsDelete = false,
                            LanguageId = 2,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 16,
                            FuterName = "Addressess: 7th lane of Beri Gabriel Salosi. 10th Cor.",
                            FuterParentId = 8,
                            IsDelete = false,
                            LanguageId = 2,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 17,
                            FuterName = "рабочее время",
                            FuterParentId = 1,
                            IsDelete = false,
                            LanguageId = 3,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 18,
                            FuterName = "интернет магазин: 24/7",
                            FuterParentId = 2,
                            IsDelete = false,
                            LanguageId = 3,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 19,
                            FuterName = "Понедельник-Пятница: 09:00-20:00",
                            FuterParentId = 3,
                            IsDelete = false,
                            LanguageId = 3,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 20,
                            FuterName = "выходные: 09:00-18:00",
                            FuterParentId = 4,
                            IsDelete = false,
                            LanguageId = 3,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 21,
                            FuterName = "Связаться с нами",
                            FuterParentId = 5,
                            IsDelete = false,
                            LanguageId = 3,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 22,
                            FuterName = "Мобильный: 599985226",
                            FuterParentId = 6,
                            IsDelete = false,
                            LanguageId = 3,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 23,
                            FuterName = "город: 0995322706389",
                            FuterParentId = 7,
                            IsDelete = false,
                            LanguageId = 3,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            FuterId = 24,
                            FuterName = "Адрес: 7th lane of Beri Gabriel Salosi. 10th Cor.",
                            FuterParentId = 8,
                            IsDelete = false,
                            LanguageId = 3,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("StoreMenegment.Models.Languages", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("LanguageName")
                        .IsRequired()
                        .HasColumnType("Nvarchar(100)");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("LanguageId");

                    b.ToTable("Languages");

                    b.HasData(
                        new
                        {
                            LanguageId = 1,
                            IsDelete = false,
                            LanguageName = "ქართული",
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            LanguageId = 2,
                            IsDelete = false,
                            LanguageName = "English",
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            LanguageId = 3,
                            IsDelete = false,
                            LanguageName = "русский",
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("StoreMenegment.Models.Menus", b =>
                {
                    b.Property<int>("MenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("MenuParentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("MenuId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MenuParentId");

                    b.ToTable("Menus");

                    b.HasData(
                        new
                        {
                            MenuId = 1,
                            IsDelete = false,
                            LanguageId = 1,
                            MenuName = "ახალი ელექტრონიქსი",
                            MenuParentId = 1,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 2,
                            IsDelete = false,
                            LanguageId = 1,
                            MenuName = "პროდუქტი",
                            MenuParentId = 2,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 3,
                            IsDelete = false,
                            LanguageId = 1,
                            MenuName = "აქციები",
                            MenuParentId = 3,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 4,
                            IsDelete = false,
                            LanguageId = 1,
                            MenuName = "მიწოდება",
                            MenuParentId = 4,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 5,
                            IsDelete = false,
                            LanguageId = 1,
                            MenuName = "გადახდა",
                            MenuParentId = 5,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 6,
                            IsDelete = false,
                            LanguageId = 1,
                            MenuName = "კონტაქტი",
                            MenuParentId = 6,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 7,
                            IsDelete = false,
                            LanguageId = 1,
                            MenuName = "რეგისტრაცია",
                            MenuParentId = 7,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 8,
                            IsDelete = false,
                            LanguageId = 1,
                            MenuName = "შესვლა",
                            MenuParentId = 8,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 9,
                            IsDelete = false,
                            LanguageId = 2,
                            MenuName = "New Electronics",
                            MenuParentId = 1,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 10,
                            IsDelete = false,
                            LanguageId = 2,
                            MenuName = "Product",
                            MenuParentId = 2,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 11,
                            IsDelete = false,
                            LanguageId = 2,
                            MenuName = "Promotions",
                            MenuParentId = 3,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 12,
                            IsDelete = false,
                            LanguageId = 2,
                            MenuName = "Delivery",
                            MenuParentId = 4,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 13,
                            IsDelete = false,
                            LanguageId = 2,
                            MenuName = "pay",
                            MenuParentId = 5,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 14,
                            IsDelete = false,
                            LanguageId = 2,
                            MenuName = "Contact",
                            MenuParentId = 6,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 15,
                            IsDelete = false,
                            LanguageId = 2,
                            MenuName = "Registration",
                            MenuParentId = 7,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 16,
                            IsDelete = false,
                            LanguageId = 2,
                            MenuName = "Login",
                            MenuParentId = 8,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 17,
                            IsDelete = false,
                            LanguageId = 3,
                            MenuName = "Новая электроника",
                            MenuParentId = 1,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 18,
                            IsDelete = false,
                            LanguageId = 3,
                            MenuName = "Продукт",
                            MenuParentId = 2,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 19,
                            IsDelete = false,
                            LanguageId = 3,
                            MenuName = "промо акции",
                            MenuParentId = 3,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 20,
                            IsDelete = false,
                            LanguageId = 3,
                            MenuName = "Delivery",
                            MenuParentId = 4,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 21,
                            IsDelete = false,
                            LanguageId = 3,
                            MenuName = "платить",
                            MenuParentId = 5,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 22,
                            IsDelete = false,
                            LanguageId = 3,
                            MenuName = "Связаться с нами",
                            MenuParentId = 6,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 23,
                            IsDelete = false,
                            LanguageId = 3,
                            MenuName = "Регистрация",
                            MenuParentId = 7,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            MenuId = 24,
                            IsDelete = false,
                            LanguageId = 3,
                            MenuName = "Авторизоваться",
                            MenuParentId = 8,
                            RecordDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("StoreMenegment.Models.MyUsers", b =>
                {
                    b.Property<int>("MyUserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Adres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AspNetUserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("ElPosta")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(75)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("Pasword")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("PersonalNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(15)");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("MyUserId");

                    b.ToTable("MyUsers");
                });

            modelBuilder.Entity("StoreMenegment.Models.ObjectFiles", b =>
                {
                    b.Property<int>("ObjectFileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsMain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("ObjectAddres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ObjectName")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("ObjectFileId");

                    b.ToTable("ObjectFiles");
                });

            modelBuilder.Entity("StoreMenegment.Models.Orders", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("ConfirmationOfDelivery")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("ConfirmationOfDeliveryDate")
                        .HasColumnType("datetime2(7)");

                    b.Property<bool>("ConfirmationOfSupply")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("ConfirmationOfSupplyDate")
                        .HasColumnType("datetime2(7)");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DeliveryService")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("MyUserId")
                        .HasColumnType("int");

                    b.Property<int>("OrderParentId")
                        .HasColumnType("int");

                    b.Property<int>("ProductParentID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("SupplyId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("OrderId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MyUserId");

                    b.HasIndex("OrderParentId");

                    b.HasIndex("ProductParentID");

                    b.HasIndex("SupplyId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("StoreMenegment.Models.PaymentMethods", b =>
                {
                    b.Property<int>("MethodOfPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("MethodOfPaymentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<int>("MethodOfPaymentParentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("MethodOfPaymentId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("MethodOfPaymentParentId");

                    b.ToTable("MethodOfPayments");
                });

            modelBuilder.Entity("StoreMenegment.Models.PositionTypes", b =>
                {
                    b.Property<int>("PositionTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int?>("PosishenTypeParentstId")
                        .HasColumnType("int");

                    b.Property<string>("PositionTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PositionTypeParentstId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("PositionTypeId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PosishenTypeParentstId");

                    b.ToTable("PosishenTypes");
                });

            modelBuilder.Entity("StoreMenegment.Models.Positions", b =>
                {
                    b.Property<int>("PosishenId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<string>("PosishenName")
                        .IsRequired()
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("PosishenParentId")
                        .HasColumnType("int");

                    b.Property<int>("PosishenTypeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<decimal>("Salary")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("PosishenId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("PosishenParentId");

                    b.HasIndex("PosishenTypeId");

                    b.ToTable("Posishens");
                });

            modelBuilder.Entity("StoreMenegment.Models.ProductColors", b =>
                {
                    b.Property<int>("ProductColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<string>("ProductColorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.HasKey("ProductColorId");

                    b.ToTable("ProductColors");
                });

            modelBuilder.Entity("StoreMenegment.Models.Products", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("BarCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(35)");

                    b.Property<int>("BrendiesId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectFileId")
                        .HasColumnType("int");

                    b.Property<int>("ProductColorId")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(350)");

                    b.Property<int>("ProductParentID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<decimal>("SalesDiscount")
                        .HasColumnType("decimal(5,2)");

                    b.Property<int>("ShopAdreshId")
                        .HasColumnType("int");

                    b.Property<int>("TechnicsId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("ProductID");

                    b.HasIndex("BrendiesId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ObjectFileId");

                    b.HasIndex("ProductColorId");

                    b.HasIndex("ProductParentID");

                    b.HasIndex("ShopAdreshId");

                    b.HasIndex("TechnicsId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("StoreMenegment.Models.ProductsSold", b =>
                {
                    b.Property<int>("ProductSoldId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<decimal>("Cash")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("DateOfSale")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeesId")
                        .HasColumnType("int");

                    b.Property<decimal>("InstallmentAmount")
                        .HasColumnType("decimal(5,2)");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<int>("MethodOfPaymentParentId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectFileId")
                        .HasColumnType("int");

                    b.Property<int>("ProductParentId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<decimal>("TerminalAmount")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("ProductSoldId");

                    b.HasIndex("EmployeesId");

                    b.HasIndex("MethodOfPaymentParentId");

                    b.HasIndex("ObjectFileId");

                    b.HasIndex("ProductParentId");

                    b.ToTable("ProductSolds");
                });

            modelBuilder.Entity("StoreMenegment.Models.SendProducts", b =>
                {
                    b.Property<int>("SendProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("FileObjectId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<int>("ProductParentId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceptionistDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("ReceptionistEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("ReceptionistEmployeesId")
                        .HasColumnType("int");

                    b.Property<int>("ReceptionistShopAdresId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<DateTime>("SendDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("SendEmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("SendEmployeesId")
                        .HasColumnType("int");

                    b.Property<int>("SendShopAdresId")
                        .HasColumnType("int");

                    b.Property<bool>("SupplyConfirming")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("SupplyConfirmingDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<bool>("SurrenderConfirming")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("SurrenderDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(20)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(5,2)");

                    b.HasKey("SendProductID");

                    b.HasIndex("FileObjectId");

                    b.HasIndex("ProductParentId");

                    b.HasIndex("ReceptionistEmployeesId");

                    b.HasIndex("ReceptionistShopAdresId");

                    b.HasIndex("SendEmployeesId");

                    b.HasIndex("SendShopAdresId");

                    b.ToTable("SendProductss");
                });

            modelBuilder.Entity("StoreMenegment.Models.Supplies", b =>
                {
                    b.Property<int>("SupplyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("ConfirmationOfPerformance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<DateTime>("ConfirmationOfPerformanceDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("EmployeeGroupId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("SupplyParentId")
                        .HasColumnType("int");

                    b.HasKey("SupplyId");

                    b.HasIndex("EmployeeGroupId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("SupplyParentId");

                    b.ToTable("Supplies");
                });

            modelBuilder.Entity("StoreMenegment.Models.Techniques", b =>
                {
                    b.Property<int>("TechnicsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("IsDelete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValueSql("0");

                    b.Property<int>("LanguageId")
                        .HasColumnType("int");

                    b.Property<int>("ObjectFileId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RecordDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2(7)")
                        .HasDefaultValueSql("GetDate()");

                    b.Property<int>("TechnicParentId")
                        .HasColumnType("int");

                    b.Property<string>("TechnicsName")
                        .IsRequired()
                        .HasColumnType("nvarchar(300)");

                    b.HasKey("TechnicsId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ObjectFileId");

                    b.HasIndex("TechnicParentId");

                    b.ToTable("Technics");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StoreMenegment.Models.Address", b =>
                {
                    b.HasOne("StoreMenegment.Models.Address", "AddresParent")
                        .WithMany()
                        .HasForeignKey("AdresParentId")
                        .HasConstraintName("FK_AdresParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Cities", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .HasConstraintName("FK_CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Languages", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.ObjectFiles", "ObjectFile")
                        .WithMany()
                        .HasForeignKey("ObjectFileId")
                        .HasConstraintName("FK_ObjectFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AddresParent");

                    b.Navigation("City");

                    b.Navigation("Language");

                    b.Navigation("ObjectFile");
                });

            modelBuilder.Entity("StoreMenegment.Models.Brands", b =>
                {
                    b.HasOne("StoreMenegment.Models.Brands", "BrandParent")
                        .WithMany()
                        .HasForeignKey("BrandyParentId")
                        .HasConstraintName("FK_BrandyParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Languages", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.ObjectFiles", "ObjectFile")
                        .WithMany()
                        .HasForeignKey("ObjectFileId")
                        .HasConstraintName("FK_ObjectfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BrandParent");

                    b.Navigation("Language");

                    b.Navigation("ObjectFile");
                });

            modelBuilder.Entity("StoreMenegment.Models.Categories", b =>
                {
                    b.HasOne("StoreMenegment.Models.Categories", "CategoryParent")
                        .WithMany()
                        .HasForeignKey("CategoryParentId")
                        .HasConstraintName("FK_CategoryParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Languages", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.ObjectFiles", "ObjectFile")
                        .WithMany()
                        .HasForeignKey("ObjectFileId")
                        .HasConstraintName("FK_ObjectFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CategoryParent");

                    b.Navigation("Language");

                    b.Navigation("ObjectFile");
                });

            modelBuilder.Entity("StoreMenegment.Models.Cities", b =>
                {
                    b.HasOne("StoreMenegment.Models.Cities", "CityParent")
                        .WithMany()
                        .HasForeignKey("CityParentId")
                        .HasConstraintName("FK_CityParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Languages", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CityParent");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("StoreMenegment.Models.Departments", b =>
                {
                    b.HasOne("StoreMenegment.Models.Departments", "DepartmentParent")
                        .WithMany()
                        .HasForeignKey("DepartmentParentId")
                        .HasConstraintName("FK_DepartmentParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Languages", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentParent");

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("StoreMenegment.Models.EmployeeGroups", b =>
                {
                    b.HasOne("StoreMenegment.Models.EmployeeGroups", "EmployeeGroupParent")
                        .WithMany()
                        .HasForeignKey("EmployeeGroupParentId")
                        .HasConstraintName("FK_EmployeeGroupParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Employees", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .HasConstraintName("FK_EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Languages", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("EmployeeGroupParent");

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("StoreMenegment.Models.Employees", b =>
                {
                    b.HasOne("StoreMenegment.Models.Address", "BrenchAddres")
                        .WithMany()
                        .HasForeignKey("BrenchAddressesId")
                        .HasConstraintName("FK_BrenchAddressesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Employees", "EmployParent")
                        .WithMany()
                        .HasForeignKey("EmployeesParentId")
                        .HasConstraintName("FK_EmployeesParentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StoreMenegment.Models.Languages", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Positions", "Posishen")
                        .WithMany()
                        .HasForeignKey("PosishenId")
                        .HasConstraintName("FK_PosishenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BrenchAddres");

                    b.Navigation("EmployParent");

                    b.Navigation("Language");

                    b.Navigation("Posishen");
                });

            modelBuilder.Entity("StoreMenegment.Models.Futers", b =>
                {
                    b.HasOne("StoreMenegment.Models.Futers", "FuterParent")
                        .WithMany()
                        .HasForeignKey("FuterParentId")
                        .HasConstraintName("FK_FuterParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Languages", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FuterParent");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("StoreMenegment.Models.Menus", b =>
                {
                    b.HasOne("StoreMenegment.Models.Languages", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Menus", "MenuParent")
                        .WithMany()
                        .HasForeignKey("MenuParentId")
                        .HasConstraintName("FK_MenuParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Languages");

                    b.Navigation("MenuParent");
                });

            modelBuilder.Entity("StoreMenegment.Models.Orders", b =>
                {
                    b.HasOne("StoreMenegment.Models.Languages", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.MyUsers", "MyUsers")
                        .WithMany()
                        .HasForeignKey("MyUserId")
                        .HasConstraintName("FK_MyUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Orders", "OrderParent")
                        .WithMany()
                        .HasForeignKey("OrderParentId")
                        .HasConstraintName("FK_OrderParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Products", "Product")
                        .WithMany()
                        .HasForeignKey("ProductParentID")
                        .HasConstraintName("FK_ProductParentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Supplies", "Supplys")
                        .WithMany()
                        .HasForeignKey("SupplyId")
                        .HasConstraintName("FK_SupplyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Languages");

                    b.Navigation("MyUsers");

                    b.Navigation("OrderParent");

                    b.Navigation("Product");

                    b.Navigation("Supplys");
                });

            modelBuilder.Entity("StoreMenegment.Models.PaymentMethods", b =>
                {
                    b.HasOne("StoreMenegment.Models.Languages", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.PaymentMethods", "MethodOfPaymentParent")
                        .WithMany()
                        .HasForeignKey("MethodOfPaymentParentId")
                        .HasConstraintName("FK_MethodOfPaymentParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("MethodOfPaymentParent");
                });

            modelBuilder.Entity("StoreMenegment.Models.PositionTypes", b =>
                {
                    b.HasOne("StoreMenegment.Models.Languages", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.PositionTypes", "PositionTypeParent")
                        .WithMany()
                        .HasForeignKey("PosishenTypeParentstId")
                        .HasConstraintName("FK_PosishenTypeParentstId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Languages");

                    b.Navigation("PositionTypeParent");
                });

            modelBuilder.Entity("StoreMenegment.Models.Positions", b =>
                {
                    b.HasOne("StoreMenegment.Models.Departments", "Departments")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Languages", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Positions", "PositionParent")
                        .WithMany()
                        .HasForeignKey("PosishenParentId")
                        .HasConstraintName("FK_PosishenParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.PositionTypes", "PosishenTypes")
                        .WithMany()
                        .HasForeignKey("PosishenTypeId")
                        .HasConstraintName("FK_PosishenTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Departments");

                    b.Navigation("Languages");

                    b.Navigation("PosishenTypes");

                    b.Navigation("PositionParent");
                });

            modelBuilder.Entity("StoreMenegment.Models.Products", b =>
                {
                    b.HasOne("StoreMenegment.Models.Brands", "Brandies")
                        .WithMany()
                        .HasForeignKey("BrendiesId")
                        .HasConstraintName("FK_BrendiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Categories", "Categories")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .HasConstraintName("FK_CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Languages", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.ObjectFiles", "ObjectFile")
                        .WithMany()
                        .HasForeignKey("ObjectFileId")
                        .HasConstraintName("FK_ObjectFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.ProductColors", "ProductColor")
                        .WithMany()
                        .HasForeignKey("ProductColorId")
                        .HasConstraintName("FK_ProductColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Products", "ProductParent")
                        .WithMany()
                        .HasForeignKey("ProductParentID")
                        .HasConstraintName("FK_ProductParentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Address", "ShopAdres")
                        .WithMany()
                        .HasForeignKey("ShopAdreshId")
                        .HasConstraintName("FK_ShopAdreshId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Techniques", "Technics")
                        .WithMany()
                        .HasForeignKey("TechnicsId")
                        .HasConstraintName("FK_TechnicsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brandies");

                    b.Navigation("Categories");

                    b.Navigation("Language");

                    b.Navigation("ObjectFile");

                    b.Navigation("ProductColor");

                    b.Navigation("ProductParent");

                    b.Navigation("ShopAdres");

                    b.Navigation("Technics");
                });

            modelBuilder.Entity("StoreMenegment.Models.ProductsSold", b =>
                {
                    b.HasOne("StoreMenegment.Models.Employees", "Emploee")
                        .WithMany()
                        .HasForeignKey("EmployeesId")
                        .HasConstraintName("FK_EmployeesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StoreMenegment.Models.PaymentMethods", "MethodOfPayment")
                        .WithMany()
                        .HasForeignKey("MethodOfPaymentParentId")
                        .HasConstraintName("FK_MethodOfPaymentParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.ObjectFiles", "ObjectFile")
                        .WithMany()
                        .HasForeignKey("ObjectFileId")
                        .HasConstraintName("FK_ObjectFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Products", "Product")
                        .WithMany()
                        .HasForeignKey("ProductParentId")
                        .HasConstraintName("FK_ProductParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Emploee");

                    b.Navigation("MethodOfPayment");

                    b.Navigation("ObjectFile");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("StoreMenegment.Models.SendProducts", b =>
                {
                    b.HasOne("StoreMenegment.Models.ObjectFiles", "ObjectFile")
                        .WithMany()
                        .HasForeignKey("FileObjectId")
                        .HasConstraintName("FK_FileObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Products", "Product")
                        .WithMany()
                        .HasForeignKey("ProductParentId")
                        .HasConstraintName("FK_ProductParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Employees", "ReceptionistEmploee")
                        .WithMany()
                        .HasForeignKey("ReceptionistEmployeesId")
                        .HasConstraintName("FK_ReceptionistEmployeesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StoreMenegment.Models.Address", "ReceptionistAdres")
                        .WithMany()
                        .HasForeignKey("ReceptionistShopAdresId")
                        .HasConstraintName("FK_ReceptionistShopAdresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Employees", "SendEmploee")
                        .WithMany()
                        .HasForeignKey("SendEmployeesId")
                        .HasConstraintName("FK_SendEmployeesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("StoreMenegment.Models.Address", "SendShopAdres")
                        .WithMany()
                        .HasForeignKey("SendShopAdresId")
                        .HasConstraintName("FK_SendShopAdresId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ObjectFile");

                    b.Navigation("Product");

                    b.Navigation("ReceptionistAdres");

                    b.Navigation("ReceptionistEmploee");

                    b.Navigation("SendEmploee");

                    b.Navigation("SendShopAdres");
                });

            modelBuilder.Entity("StoreMenegment.Models.Supplies", b =>
                {
                    b.HasOne("StoreMenegment.Models.EmployeeGroups", "EmployeeGroups")
                        .WithMany()
                        .HasForeignKey("EmployeeGroupId")
                        .HasConstraintName("FK_EmployeesGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Languages", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Supplies", "SupplyParent")
                        .WithMany()
                        .HasForeignKey("SupplyParentId")
                        .HasConstraintName("FK_SupplyParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EmployeeGroups");

                    b.Navigation("Languages");

                    b.Navigation("SupplyParent");
                });

            modelBuilder.Entity("StoreMenegment.Models.Techniques", b =>
                {
                    b.HasOne("StoreMenegment.Models.Languages", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.ObjectFiles", "ObjectFile")
                        .WithMany()
                        .HasForeignKey("ObjectFileId")
                        .HasConstraintName("FK_ObjectFileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreMenegment.Models.Techniques", "TechnicParent")
                        .WithMany()
                        .HasForeignKey("TechnicParentId")
                        .HasConstraintName("FK_TechnicParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("ObjectFile");

                    b.Navigation("TechnicParent");
                });
#pragma warning restore 612, 618
        }
    }
}
